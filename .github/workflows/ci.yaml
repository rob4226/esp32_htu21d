# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Main CI Process
on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:

  prepare:
    name: Prepare CI
    runs-on: ubuntu-latest
    steps:
      - id: setup_python
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - id: checkout
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

  build_esp32xx:
    name: Build for ESP32xx
    runs-on: ubuntu-latest
    needs:
      - prepare
    strategy:
      # run other jobs even when one job failed:
      fail-fast: false
      # releases, see https://github.com/espressif/esp-idf#esp-idf-release-support-schedule
      matrix:
        esp_idf_version:
          - latest
          - release-v5.1
          - release-v5.0
          - release-v4.4
          # - release-v4.3  # Doesn't support newer version of IDF component manager.
        target:
          - esp32
          - esp32s2
          - esp32s3
          - esp32c2
          - esp32c3
          - esp32c6
          - esp32h2
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - id: ccache
        name: Install ccache
        run: |
          sudo apt-get update
          sudo apt-get -y install ccache

      - id: build_esp32
        name: Build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ matrix.esp_idf_version }}
          target: ${{ matrix.target }}
          path: examples
          command: |
            # XXX share cache between examples.
            # see "Compiling In Different Directories" in ccache(1)
            export CCACHE_BASEDIR="$(pwd)"
            export CCACHE_NOHASHDIR=true

            # Only build the example projects if the current target is supported
            # by the current ESP-IDF version:
            # See support matrix at https://github.com/espressif/esp-idf#esp-idf-release-and-soc-compatibility
            should_build_examples="no"

            # ESP32: all
            if [ "${{ matrix.target }}" = "esp32" ]; then
              should_build_examples="yes"
            fi

            # ESP32-S2: all
            if [ "${{ matrix.target }}" = "esp32s2" ]; then
              should_build_examples="yes"
            fi

            # ESP32-C3: 4.3, 4.4, 5.0, 5.1
            if [ "${{ matrix.target }}" = "esp32c3" ]; then
              if [ "${{ matrix.esp_idf_version }}" != "release-v4.2" ]; then
                should_build_examples="yes"
              fi
            fi

            # ESP32-S3: 4.4, 5.0, 5.1
            if [ "${{ matrix.target }}" = "esp32s3" ]; then
              if [   "${{ matrix.esp_idf_version }}" != "release-v4.2" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v4.3"]; then
                should_build_examples="yes"
              fi
            fi

            # ESP32-C2: 5.0, 5.1
            if [ "${{ matrix.target }}" = "esp32c2" ]; then
              if [   "${{ matrix.esp_idf_version }}" != "release-v4.2" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v4.3" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v4.4" ]; then
                should_build_examples="yes"
              fi
            fi

            # ESP32-C6: 5.1
            if [ "${{ matrix.target }}" = "esp32c6" ]; then
              if [   "${{ matrix.esp_idf_version }}" != "release-v4.2" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v4.3" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v4.4" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v5.0" ]; then
                should_build_examples="yes"
              fi
            fi

            # ESP32-H2: 5.1
            if [ "${{ matrix.target }}" = "esp32h2" ]; then
              if [   "${{ matrix.esp_idf_version }}" != "release-v4.2" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v4.3" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v4.4" \
                  -a "${{ matrix.esp_idf_version }}" != "release-v5.0" ]; then
                should_build_examples="yes"
              fi
            fi

            if [ "$should_build_examples" = "no" ]; then
              echo "Nothing to build: ESP-IDF ${{ matrix.esp_idf_version }} does not support ${{ matrix.target }}"
              exit 0
            fi

            echo "================================================================================="
            echo "Building example projects for target: ${{ matrix.target }} with ESP-IDF version: ${{ matrix.esp_idf_version }}"
            echo "================================================================================="

            # Loop through each example project and build them which pulls in
            # the local esp32_htu21d component. This will make sure this component
            # is able to be built for each target/ESP-IDF version combination:
            # The pwd at this point is "examples/":
            for dir in */; do
              cd ${dir}
              echo ""; echo "";
              echo "********************************************************************************"
              echo "Building example project: $dir"
              echo "On target: ${{ matrix.target }}"
              echo "With ESP-IDF version: ${{ matrix.esp_idf_version }}"
              echo "********************************************************************************"
              idf.py --ccache build; res=$?; [ $res -ne 0 ] && exit $res
              rm -rf build
              cd ..
            done
